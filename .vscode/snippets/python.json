{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "djTest": {
    "description": "Django TestCase setup",
    "prefix": ">dj-test",
    "scope": "python",
    "body": [
      "\"\"\"",
      "Test the ${1:module} Module",
      "\"\"\"",
      "from django.test import TestCase",
      "",
      "class ${1:module}TestCase(TestCase):",
      "    \"\"\"",
      "    Test the ${1:module} Module",
      "    \"\"\"",
      "",
      "    def test_${2:test_name}(self):",
      "        \"\"\"",
      "        Tests ${3:test_description}",
      "        \"\"\"",
      "        $0",
      "        self.assertEqual()",
      ""
    ]
  },
  "djTestViewSetup": {
    "description": "Setup for testing django views",
    "prefix": ">dj-test-view-setup",
    "scope": "python",
    "body": [
      "\"\"\"",
      "${1:View} test case",
      "\"\"\"",
      "",
      "from django.test import TestCase, Client",
      "",
      "class ${1:View}ViewTestCase(TestCase):",
      "    \"\"\"",
      "    ${1:View} test case",
      "    \"\"\"",
      "    def setUp(self):",
      "        \"\"\"",
      "        Sets up client",
      "        \"\"\"",
      "        self.client = Client()",
      "",
      "    $0"
    ]
  },
  "djTestViewGet": {
    "description": "Django test for a GET",
    "prefix": ">dj-test-get",
    "scope": "python",
    "body": [
      "def test_get(self):",
      "    \"\"\"",
      "    Tests a GET request",
      "    \"\"\"",
      "    response = self.client.get('${1:url}')",
      "    self.assertEqual(response.status_code, 200)",
      "    self.assertEqual(response.data, {$0})"
    ]
  },
  "djTestViewPost": {
    "description": "Django test for a POST",
    "prefix": ">dj-test-post",
    "scope": "python",
    "body": [
      "def test_post(self):",
      "    \"\"\"",
      "    Test a POST request",
      "    \"\"\"",
      "    response = self.client.post('${1:url}', {",
      "        ${2:req_body}",
      "    })",
      "",
      "",
      "    self.assertEqual(response.status_code, 200)",
      "    self.assertEqual(response.data, {${3:resp_data}})"
    ]
  },
  "djMockResponse": {
    "description": "Mock response class",
    "prefix": ">dj-mock-response",
    "scope": "python",
    "body": [
      "class Mock${1:response_desc}Response():",
      "    \"\"\"",
      "    Mocks a ${1:response_desc} Response",
      "    \"\"\"",
      "    status_code = ${2:status_code}",
      "    $0"
    ]
  },
  "pdb": {
    "description": "Pdb Debug",
    "prefix": ">pdb",
    "scope": "python",
    "body": ["import pdb; pdb.set_trace()"]
  },
  "pythonPrint": {
    "description": "Python Print",
    "prefix": ">pr",
    "scope": "python",
    "body": [
      "print('')",
      "print('')",
      "print(${1:print})",
      "print('')",
      "print('')"
    ]
  }
}
